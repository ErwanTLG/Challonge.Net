using System;
using System.Threading.Tasks;
using NUnit.Framework;
using Challonge;
using Challonge.Tournaments;

namespace Tests
{
    [TestFixture]
    [TestOf(typeof(ChallongeClient.TournamentHandler))]
    public class Tournaments
    {
        [TestCaseSource(nameof(_createTournamentCases))]
        public async Task StandardCreateTournamentTest(bool boolValue, int? nullableInt, float floatValue, TournamentGrandFinals grandFinals,
            TournamentRankingStats rankingStats, TournamentType type)
        {
            TournamentBuilder builder = new TournamentBuilder
            {
                AcceptAttachments = boolValue,
                CheckInDuration = nullableInt,
                Description = Utils.GetRandomString(),
                GrandFinalsModifier = grandFinals,
                HideForum = boolValue,
                HoldThirdPlaceMatch = boolValue,
                IsPrivate = boolValue,
                Name = "chalnet-tests-" + Utils.GetRandomString(),
                NotifyUsersWhenMatchesOpen = boolValue,
                NotifyUsersWhenTournamentEnds = boolValue,
                OpenSignup = boolValue,
                PointsForBye = floatValue,
                PointsForGameTie = floatValue,
                PointsForGameWin = floatValue,
                PointsForMatchTie = floatValue,
                PointsForMatchWin = floatValue,
                RankedBy = rankingStats,
                SequentialPairings = boolValue,
                ShowRounds = boolValue,
                SignupCap = nullableInt,
                TournamentType = type,
                RrIterations = nullableInt
                // we don't test SwissRounds, it always returns 0
                // I think it only works when you have some participants registered
            };

            builder.RrIterations = type switch
            {
                TournamentType.Swiss or TournamentType.DoubleElimination or TournamentType.RoundRobin => 3,
                TournamentType.SingleRace or TournamentType.TimeTrial => 1,
                _ => builder.RrIterations
            };

            if (boolValue)
                builder.StartAt = DateTimeOffset.Now.AddHours(1);
            else
            {
                builder.StartAt = null;
                builder.CheckInDuration = null;
            }

            if (type == TournamentType.FreeForAll)
                builder.ParticipantsPerMatch = nullableInt;
            
            Tournament tournament = await Main.Client.Tournaments.CreateTournamentAsync(builder);
            // we use urls generated by Challonge to make sure we don't get errors because the url is already taken
            // because of this, we need to ignore the url of the created tournament
            TournamentBuilder result = new TournamentBuilder(tournament) { Url = null };
            
            Utils.AssertEquals(result, builder);
        }
        
        private static object[] _createTournamentCases =
        {
            // basic test, default values
            new object[]
            {
                false, null, 0f, TournamentGrandFinals.TwoChances, TournamentRankingStats.MatchWins, TournamentType.SingleElimination
            },
            // TournamentGrandFinals is only affected on DoubleElimination, we test it in the 3 following tests
            new object[]
            {
                true, 5, 0.5f, TournamentGrandFinals.Skip, TournamentRankingStats.Custom, TournamentType.DoubleElimination
            },
            new object[]
            {
                false, 10, 1f, TournamentGrandFinals.SingleMatch, TournamentRankingStats.GameWins, TournamentType.DoubleElimination
            },
            new object[]
            {
                true, 15, 1.5f, TournamentGrandFinals.TwoChances, TournamentRankingStats.PointsDifference, TournamentType.DoubleElimination
            },
            // remaining tests for basic tournament types
            new object[]
            {
                false, 20, 2f, TournamentGrandFinals.TwoChances, TournamentRankingStats.PointsScored, TournamentType.Swiss
            },
            new object[]
            {
                true, 25, 2.5f, TournamentGrandFinals.TwoChances, TournamentRankingStats.GameWinPercentage, TournamentType.RoundRobin
            },
            // free for all (the int must be <= 16)
            new object[]
            {
                false, 15, 3f, TournamentGrandFinals.TwoChances, TournamentRankingStats.MatchWins, TournamentType.FreeForAll
            },
            // races
            new object[]
            {
                false, null, 3.5f, TournamentGrandFinals.TwoChances, TournamentRankingStats.PointsScored, TournamentType.SingleRace
            },
            new object[]
            {
                true, 5, 4f, TournamentGrandFinals.TwoChances, TournamentRankingStats.Custom, TournamentType.GrandPrix
            },
            new object[]
            {
                true, 10, 4.5f, TournamentGrandFinals.TwoChances, TournamentRankingStats.MatchWins, TournamentType.TimeTrial
            }
        };
    }
}